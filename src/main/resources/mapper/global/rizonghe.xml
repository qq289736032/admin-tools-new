<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="rizonghe">

    <sql id="pccu_column">
        sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 1 ),',',-1)) col1,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 2 ),',',-1)) col2,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 3 ),',',-1)) col3,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 4 ),',',-1)) col4,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 5 ),',',-1)) col5,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 6 ),',',-1)) col6,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 7 ),',',-1)) col7,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 8 ),',',-1)) col8,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 9 ),',',-1)) col9,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 10 ),',',-1)) col10,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 11 ),',',-1)) col11,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 12 ),',',-1)) col12,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 13 ),',',-1)) col13,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 14 ),',',-1)) col14,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 15 ),',',-1)) col15,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 16 ),',',-1)) col16,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 17 ),',',-1)) col17,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 18 ),',',-1)) col18,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 19 ),',',-1)) col19,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 20 ),',',-1)) col20,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 21 ),',',-1)) col21,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 22 ),',',-1)) col22,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 23 ),',',-1)) col23,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 24 ),',',-1)) col24,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 25 ),',',-1)) col25,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 26 ),',',-1)) col26,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 27 ),',',-1)) col27,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 28 ),',',-1)) col28,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 29 ),',',-1)) col29,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 30 ),',',-1)) col30,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 31 ),',',-1)) col31,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 32 ),',',-1)) col32,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 33 ),',',-1)) col33,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 34 ),',',-1)) col34,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 35 ),',',-1)) col35,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 36 ),',',-1)) col36,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 37 ),',',-1)) col37,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 38 ),',',-1)) col38,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 39 ),',',-1)) col39,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 40 ),',',-1)) col40,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 41 ),',',-1)) col41,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 42 ),',',-1)) col42,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 43 ),',',-1)) col43,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 44 ),',',-1)) col44,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 45 ),',',-1)) col45,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 46 ),',',-1)) col46,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 47 ),',',-1)) col47,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 48 ),',',-1)) col48,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 49 ),',',-1)) col49,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 50 ),',',-1)) col50,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 51 ),',',-1)) col51,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 52 ),',',-1)) col52,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 53 ),',',-1)) col53,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 54 ),',',-1)) col54,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 55 ),',',-1)) col55,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 56 ),',',-1)) col56,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 57 ),',',-1)) col57,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 58 ),',',-1)) col58,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 59 ),',',-1)) col59,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 60 ),',',-1)) col60,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 61 ),',',-1)) col61,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 62 ),',',-1)) col62,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 63 ),',',-1)) col63,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 64 ),',',-1)) col64,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 65 ),',',-1)) col65,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 66 ),',',-1)) col66,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 67 ),',',-1)) col67,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 68 ),',',-1)) col68,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 69 ),',',-1)) col69,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 70 ),',',-1)) col70,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 71 ),',',-1)) col71,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 72 ),',',-1)) col72,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 73 ),',',-1)) col73,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 74 ),',',-1)) col74,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 75 ),',',-1)) col75,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 76 ),',',-1)) col76,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 77 ),',',-1)) col77,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 78 ),',',-1)) col78,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 79 ),',',-1)) col79,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 80 ),',',-1)) col80,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 81 ),',',-1)) col81,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 82 ),',',-1)) col82,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 83 ),',',-1)) col83,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 84 ),',',-1)) col84,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 85 ),',',-1)) col85,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 86 ),',',-1)) col86,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 87 ),',',-1)) col87,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 88 ),',',-1)) col88,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 89 ),',',-1)) col89,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 90 ),',',-1)) col90,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 91 ),',',-1)) col91,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 92 ),',',-1)) col92,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 93 ),',',-1)) col93,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 94 ),',',-1)) col94,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 95 ),',',-1)) col95,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 96 ),',',-1)) col96,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 97 ),',',-1)) col97,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 98 ),',',-1)) col98,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 99 ),',',-1)) col99,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 100 ),',',-1)) col100,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 101 ),',',-1)) col101,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 102 ),',',-1)) col102,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 103 ),',',-1)) col103,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 104 ),',',-1)) col104,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 105 ),',',-1)) col105,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 106 ),',',-1)) col106,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 107 ),',',-1)) col107,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 108 ),',',-1)) col108,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 109 ),',',-1)) col109,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 110 ),',',-1)) col110,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 111 ),',',-1)) col111,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 112 ),',',-1)) col112,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 113 ),',',-1)) col113,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 114 ),',',-1)) col114,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 115 ),',',-1)) col115,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 116 ),',',-1)) col116,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 117 ),',',-1)) col117,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 118 ),',',-1)) col118,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 119 ),',',-1)) col119,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 120 ),',',-1)) col120,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 121 ),',',-1)) col121,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 122 ),',',-1)) col122,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 123 ),',',-1)) col123,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 124 ),',',-1)) col124,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 125 ),',',-1)) col125,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 126 ),',',-1)) col126,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 127 ),',',-1)) col127,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 128 ),',',-1)) col128,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 129 ),',',-1)) col129,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 130 ),',',-1)) col130,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 131 ),',',-1)) col131,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 132 ),',',-1)) col132,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 133 ),',',-1)) col133,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 134 ),',',-1)) col134,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 135 ),',',-1)) col135,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 136 ),',',-1)) col136,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 137 ),',',-1)) col137,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 138 ),',',-1)) col138,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 139 ),',',-1)) col139,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 140 ),',',-1)) col140,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 141 ),',',-1)) col141,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 142 ),',',-1)) col142,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 143 ),',',-1)) col143,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 144 ),',',-1)) col144,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 145 ),',',-1)) col145,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 146 ),',',-1)) col146,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 147 ),',',-1)) col147,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 148 ),',',-1)) col148,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 149 ),',',-1)) col149,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 150 ),',',-1)) col150,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 151 ),',',-1)) col151,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 152 ),',',-1)) col152,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 153 ),',',-1)) col153,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 154 ),',',-1)) col154,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 155 ),',',-1)) col155,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 156 ),',',-1)) col156,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 157 ),',',-1)) col157,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 158 ),',',-1)) col158,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 159 ),',',-1)) col159,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 160 ),',',-1)) col160,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 161 ),',',-1)) col161,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 162 ),',',-1)) col162,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 163 ),',',-1)) col163,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 164 ),',',-1)) col164,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 165 ),',',-1)) col165,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 166 ),',',-1)) col166,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 167 ),',',-1)) col167,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 168 ),',',-1)) col168,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 169 ),',',-1)) col169,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 170 ),',',-1)) col170,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 171 ),',',-1)) col171,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 172 ),',',-1)) col172,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 173 ),',',-1)) col173,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 174 ),',',-1)) col174,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 175 ),',',-1)) col175,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 176 ),',',-1)) col176,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 177 ),',',-1)) col177,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 178 ),',',-1)) col178,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 179 ),',',-1)) col179,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 180 ),',',-1)) col180,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 181 ),',',-1)) col181,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 182 ),',',-1)) col182,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 183 ),',',-1)) col183,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 184 ),',',-1)) col184,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 185 ),',',-1)) col185,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 186 ),',',-1)) col186,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 187 ),',',-1)) col187,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 188 ),',',-1)) col188,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 189 ),',',-1)) col189,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 190 ),',',-1)) col190,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 191 ),',',-1)) col191,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 192 ),',',-1)) col192,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 193 ),',',-1)) col193,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 194 ),',',-1)) col194,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 195 ),',',-1)) col195,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 196 ),',',-1)) col196,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 197 ),',',-1)) col197,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 198 ),',',-1)) col198,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 199 ),',',-1)) col199,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 200 ),',',-1)) col200,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 201 ),',',-1)) col201,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 202 ),',',-1)) col202,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 203 ),',',-1)) col203,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 204 ),',',-1)) col204,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 205 ),',',-1)) col205,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 206 ),',',-1)) col206,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 207 ),',',-1)) col207,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 208 ),',',-1)) col208,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 209 ),',',-1)) col209,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 210 ),',',-1)) col210,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 211 ),',',-1)) col211,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 212 ),',',-1)) col212,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 213 ),',',-1)) col213,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 214 ),',',-1)) col214,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 215 ),',',-1)) col215,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 216 ),',',-1)) col216,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 217 ),',',-1)) col217,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 218 ),',',-1)) col218,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 219 ),',',-1)) col219,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 220 ),',',-1)) col220,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 221 ),',',-1)) col221,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 222 ),',',-1)) col222,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 223 ),',',-1)) col223,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 224 ),',',-1)) col224,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 225 ),',',-1)) col225,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 226 ),',',-1)) col226,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 227 ),',',-1)) col227,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 228 ),',',-1)) col228,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 229 ),',',-1)) col229,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 230 ),',',-1)) col230,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 231 ),',',-1)) col231,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 232 ),',',-1)) col232,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 233 ),',',-1)) col233,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 234 ),',',-1)) col234,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 235 ),',',-1)) col235,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 236 ),',',-1)) col236,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 237 ),',',-1)) col237,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 238 ),',',-1)) col238,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 239 ),',',-1)) col239,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 240 ),',',-1)) col240,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 241 ),',',-1)) col241,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 242 ),',',-1)) col242,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 243 ),',',-1)) col243,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 244 ),',',-1)) col244,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 245 ),',',-1)) col245,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 246 ),',',-1)) col246,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 247 ),',',-1)) col247,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 248 ),',',-1)) col248,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 249 ),',',-1)) col249,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 250 ),',',-1)) col250,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 251 ),',',-1)) col251,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 252 ),',',-1)) col252,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 253 ),',',-1)) col253,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 254 ),',',-1)) col254,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 255 ),',',-1)) col255,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 256 ),',',-1)) col256,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 257 ),',',-1)) col257,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 258 ),',',-1)) col258,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 259 ),',',-1)) col259,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 260 ),',',-1)) col260,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 261 ),',',-1)) col261,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 262 ),',',-1)) col262,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 263 ),',',-1)) col263,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 264 ),',',-1)) col264,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 265 ),',',-1)) col265,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 266 ),',',-1)) col266,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 267 ),',',-1)) col267,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 268 ),',',-1)) col268,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 269 ),',',-1)) col269,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 270 ),',',-1)) col270,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 271 ),',',-1)) col271,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 272 ),',',-1)) col272,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 273 ),',',-1)) col273,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 274 ),',',-1)) col274,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 275 ),',',-1)) col275,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 276 ),',',-1)) col276,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 277 ),',',-1)) col277,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 278 ),',',-1)) col278,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 279 ),',',-1)) col279,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 280 ),',',-1)) col280,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 281 ),',',-1)) col281,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 282 ),',',-1)) col282,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 283 ),',',-1)) col283,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 284 ),',',-1)) col284,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 285 ),',',-1)) col285,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 286 ),',',-1)) col286,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 287 ),',',-1)) col287,
              sum(SUBSTRING_INDEX(SUBSTRING_INDEX(five_minute_count , ',', 288 ),',',-1)) col288
    </sql>

    <select id="paging" parameterType="java.util.HashMap" resultType="java.util.HashMap">
          SELECT
            log_day,
            count(1) num,
            sum(stat_integrated.is_open_day) kaifuNum,
            sum(stat_integrated.ru) ru,
            sum(stat_integrated.dru) dru,
            sum(stat_integrated.dau) dau,
            sum(stat_integrated.dau_duplicate) dau2,
            sum(stat_integrated.rdau) rdau,
            sum(stat_integrated.acu) acu,
            sum(stat_integrated.dt) dt,
            sum(stat_integrated.income) income,
--             sum(stat_integrated.expenses) expenses,
            sum(stat_integrated.all_income) all_income,
--             sum(stat_integrated.all_expenses) all_expenses,
            sum(stat_integrated.nn_pa) nn_pa,
            sum(stat_integrated.on_pa) on_pa,
            sum(stat_integrated.pa) pa,
            sum(stat_integrated.dpa) dpa,
            sum(stat_integrated.apa) apa,
            sum(stat_integrated.first_pay_user) first_pay_user,
            sum(stat_integrated.first_pay_value) first_pay_value,
            sum(stat_integrated.nn_pay_value) nn_pay_value,
            sum(stat_integrated.on_pay_value) on_pay_value,
            sum(stat_integrated.second_remainer) second_remainer,
            sum(stat_integrated.third_remainer) third_remainer,
            sum(stat_integrated.seventh_remainer) seventh_remainer,
            sum(stat_integrated.doubleweek_remainer) doubleweek_remainer,
            sum(stat_integrated.month_remainer) month_remainer,
            sum(dpa)/sum(dau) pay_rate,
            sum(income)/sum(dpa) arpu,
            sum(income)/sum(pid) p_income_percent,
            sum(dau)/sum(pid) p_dau_percent,
            sum(dru)/sum(pid) p_dru_percent
         FROM `stat_integrated`
         GROUP BY  log_day
    </select>

    <select id="findByTimeRange" resultType="java.util.HashMap" parameterType="java.util.HashMap">
          SELECT
            log_day,
            count(1) num,
            sum(stat_integrated.is_open_day) kaifuNum,
            sum(stat_integrated.ru) ru,
            sum(stat_integrated.druc) druc,
            sum(stat_integrated.dru) dru,
            sum(stat_integrated.dau) dau,
            sum(stat_integrated.dau_duplicate) dau2,
            sum(stat_integrated.rdau) rdau,
          <!--   avg(stat_integrated.acu) acu, -->
            sum(stat_integrated.dt) dt,
            sum(stat_integrated.income) income,
--             sum(stat_integrated.expenses) expenses,
            sum(stat_integrated.all_income) all_income,
--             sum(stat_integrated.all_expenses) all_expenses,
            sum(stat_integrated.nn_pa) nn_pa,
            sum(stat_integrated.on_pa) on_pa,
            sum(stat_integrated.pa) pa,
            sum(stat_integrated.dpa) dpa,
            sum(stat_integrated.apa) apa,
            sum(stat_integrated.first_pay_user) first_pay_user,
            sum(stat_integrated.first_pay_value) first_pay_value,
            sum(stat_integrated.nn_pay_value) nn_pay_value,
            sum(stat_integrated.on_pay_value) on_pay_value,
            sum(stat_integrated.second_remainer) second_remainer,
            sum(stat_integrated.third_remainer) third_remainer,
            sum(stat_integrated.seventh_remainer) seventh_remainer,
            sum(stat_integrated.doubleweek_remainer) doubleweek_remainer,
            sum(stat_integrated.month_remainer) month_remainer,
            sum(dpa)/sum(dau) pay_rate,
            sum(income)/sum(dpa) arpu,
            sum(income)/sum(pid) p_income_percent,
            sum(dau)/sum(pid) p_dau_percent,
            sum(dru)/sum(pid) p_dru_percent
             <!--  <include refid="pccu_column"/> -->
       FROM stat_integrated
          WHERE 1 = 1 
         <if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
         <if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>          
          GROUP BY log_day
          ORDER BY log_day DESC
    </select>


    <select id="findByPlatform" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select pid, sum(income) income,sum(dau) dau,sum(dru) dru
        from stat_integrated 
        where 1 =1
        <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>        
        GROUP BY pid
    </select>
    
    <select id="findByPlatformTotal" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select sum(income) income,sum(dau) dau,sum(dru) dru
        from stat_integrated 
        where 1 =1
        <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>replace(#{createDateEnd},'-','')</if>
        <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>replace(#{createDateStart},'-','')</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>        
    </select>

    <select id="findHisTotal" resultType="java.util.HashMap" parameterType="java.util.HashMap">
        SELECT
            log_day,
            total_server_count,
            total_earning,
            total_registration,
            total_recharge_user_count
        FROM `stat_total_integrated`
        WHERE 1 =1
        <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
        ORDER BY  log_day DESC
    </select>

    <select id="findDailyReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
        SELECT
            log_day,
            sum(is_open_day) kaifuNum,
            sum(income) income,
            sum(dru) dru,       										<!--日新注册人数 -->
            sum(dau) dau,												<!--日活跃 -->
           <!--  sum(acu) acu,	 -->										
            sum(dt)/count(area_id) as dt ,
            count(area_id) areaNum,										
            sum(dpa) dpa,												<!-- 日充值人数 -->
            sum(dp_times) as dp_times,									<!-- 日充值次数 -->											
            sum(dpa) /sum(dau) pay_rate,								<!--日付费率=日充值人数/日活跃 -->
            sum(income) / sum(dpa) arpu,								<!--日ARPU= 日充值金额/日充值用户数 -->
            sum(income) / sum(dau) active_arpu,							<!--日活跃ARPU= 日充值金额/日活跃数 -->
            sum(first_pay_user) first_pay_user,							<!-- 日首充人数 -->
            sum(first_pay_value) first_pay_value,						<!-- 日首充金额 -->
            sum(first_pay_times) first_pay_Num,							<!-- 日首冲次数 -->
            sum(nn_pa) nn_pa,											<!-- 新新充值人数 -->
            sum(nn_pay_value) nn_pay_value,								<!-- 新新充值金额 -->
            sum(nn_pa) / sum(dru) nn_payingrate,						<!-- 新新付费率= 新新充值人数/当日新注册用户 -->
            sum(nn_pay_times) nn_pay_times,								<!-- 新新充值次数 -->
            sum(nn_pay_value) / sum(nn_pa) nn_arpu,						<!-- 新新ARPU= 新新充值金额/新新充值人数 -->
            sum(on_pa) on_pa,											<!-- 老新充值人数 -->
            sum(on_pay_value) on_pay_value,								<!-- 老新充值金额 -->
            sum(on_pa)/ (sum(dau)-sum(dru)) on_payingrate,				<!-- 老新付费率= 老新充值人数/老用户 -->
            sum(on_pay_times) on_pay_times,								<!-- 老新充值次数 -->
            sum(on_pay_value) / sum(on_pa) on_arpu,						<!-- 老新ARPU= 老新充值金额/老新充值人数 -->
            sum(oo_pa) oo_pa,											<!--老老充值人数  -->
            sum(oo_pay_value) oo_pay_value,								<!--老老充值金额 -->
            sum(oo_pay_times) oo_pay_times,								<!-- 老老充值次数 -->
            sum(oo_pa) / (sum(dau)-sum(dru)) oldold_payingrate,			<!--老老付费率= 老老充值人数/老用户  -->
            sum(oo_pay_value) / sum(oo_pa) oldold_arpu,					<!--老老ARPU= 老老充值金额/老老充值用户  -->
        <include refid="pccu_column"/>
        FROM  stat_integrated
        WHERE 1 = 1
        <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>        
        GROUP BY log_day
        ORDER BY  log_day DESC
    </select>


    <select id="findWeekReport" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         select log_year as log_year, 
                log_week as log_week, 
                sum(is_open_week) as open_num,  		<!-- 开服数 -->
                sum(income) as income,  				<!-- 周收入 -->
                sum(ru) as ru,          				<!-- 周注册人数 -->
                sum(au) as au,  						<!-- 周活跃 -->
                sum(ou) as ou,   						<!-- 周老用户数 -->
                sum(pu) as pu,  						<!-- 周充值用户数 -->
                sum(pu)/sum(au) as wRate, 				<!-- 周付费率 -->
                sum(income)/sum(pu) as wArpu, 			<!-- 周ARPU -->  
                sum(income)/sum(au) as wActiveArpu, 	<!-- 周活跃ARPU -->
                sum(nn_pu) as npu,						<!-- 周新新充值人数 -->
                sum(nn_pay_value) as nincome,			<!-- 周新新充值金额 -->
				sum(nn_pu)/sum(ru) as nRate,			<!-- 周新新付费率 = 周新新充值人数/周新注册用户  -->
				sum(nn_pay_value)/sum(nn_pu) as nArpu,  <!-- 周新新Arpu= 周新新充值金额/周新新充值人数 -->
				sum(ou_pu) as opu,						<!-- 周老充值人数 -->
				sum(ou_pay_value) as oincome,			<!-- 周老充值金额 -->
				sum(ou_pu)/(sum(au)-sum(ru)) as oRate,	<!-- 周老付费率=老充值人数/(日活跃-日新注册人数) -->
				sum(ou_pay_value)/sum(ou_pu) as oArpu  	<!-- 周老ARPU=老充值金额/老充值人数 -->
		 from stat_weekly_integrated
         where 1 =1 
         <if test="@Ognl@isNotBlank(createDateEnd)">and log_week <![CDATA[ <= ]]>#{endWeek}</if>
         <if test="@Ognl@isNotBlank(createDateStart)"> and log_week <![CDATA[ >= ]]> #{startWeek}</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>         
         GROUP BY log_year,log_week
         ORDER BY log_year,log_week DESC
    </select>

    <select id="findServerDailyReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
        SELECT
			stat_integrated.log_day log_day,
        sum(stat_integrated.income) income,
        sum(stat_integrated.dru) dru,
        sum(stat_integrated.dau) dau,
        sum(stat_integrated.dau-stat_integrated.dru) dau_sub_dru,
        avg(stat_integrated.acu) acu,
-- 			stat_integrated.pcu pcu,
        avg(stat_integrated.dt) dt,
        sum(stat_integrated.dpa) dpa,
			sum(stat_integrated.dp_times) dp_times,
        sum(stat_integrated.dpa/stat_integrated.dau) dpa_dau,
        sum(stat_integrated.income/stat_integrated.dpa) income_pa,
        sum(stat_integrated.income/stat_integrated.dau) income_dau_duplicate,
        sum(stat_integrated.first_pay_user) first_pay_user,
        sum(stat_integrated.first_pay_times) first_pay_times,
        sum(stat_integrated.first_pay_value) first_pay_value,
        sum(stat_integrated.second_remainer) second_remainer,
        sum(stat_integrated.third_remainer) third_remainer,
        sum(stat_integrated.seventh_remainer) seventh_remainer,
        sum(stat_integrated.doubleweek_remainer) doubleweek_remainer,
        sum(stat_integrated.month_remainer) month_remainer,
        <include refid="pccu_column"/>
		FROM
			stat_integrated
		WHERE 1 = 1
			<if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          	<if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
			and stat_integrated.area_id = #{currentServerId}
        GROUP BY stat_integrated.log_day
		ORDER BY
			stat_integrated.log_day DESC
    </select>
    <select id="findGunfuUserStatReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
        SELECT
			stat_integrated.log_day log_day,
			sum(stat_integrated.income) income,
			sum(stat_integrated.dru) dru,
			sum(stat_integrated.dau) dau,
			avg(stat_integrated.acu) acu,
			avg(stat_integrated.dt) dt,
			sum(stat_integrated.dpa) dpa,
			sum(stat_integrated.dpa)/sum(stat_integrated.dau) dpa_dau_duplicate,
			sum(stat_integrated.income)/sum(stat_integrated.dpa) income_dpa,
			sum(stat_integrated.gunfu_income) gunfu_income,
			sum(stat_integrated.dru_gunfu) dru_gunfu,
			sum(stat_integrated.rdau) rdau,
			sum(stat_integrated.gunfu_acu) gunfu_acu,
			sum(stat_integrated.gunfu_dt) gunfu_dt,
			sum(stat_integrated.gunfu_pa) gunfu_pa,
			sum(stat_integrated.gunfu_pa)/sum(stat_integrated.rdau) gunfu_dpa_rdau,
			sum(stat_integrated.gunfu_income)/sum(stat_integrated.gunfu_pa) gunfu_income_gunfu_dpa
		FROM
			stat_integrated
		WHERE 1 = 1 
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
		    <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>          	
        GROUP BY log_day
		ORDER BY
			stat_integrated.log_day DESC
    </select>

    <select id="findFiveMinuteCount" resultType="java.util.HashMap" parameterType="java.lang.String">
        SELECT log_day,
        <include refid="pccu_column"/>
        FROM stat_integrated
        WHERE log_month = #{month}
        GROUP by log_day
    </select>
    
        
    <!-- 查询当前日期 -->
    <select id="findCurrentMonthlyTotalData" resultType="java.util.HashMap" parameterType="java.util.HashMap">
        SELECT log_month,
               sum(income) income,
               sum(dru) dru,    					<!--新注册 -->
               avg(acu) acu,    					<!-- 平均在线人数 -->
               sum(mpu) mpu,    					<!--  月充值人数 -->
               sum(mpu)/sum(mau) pay_rate,			<!-- 月充值人数/月活跃人数 -->
               sum(income)/sum(mpu) arpu,  			<!-- 月充值金额/月充值人数 -->
               sum(income)/sum(mau) active_rapu,    <!-- 月充值金额/月活跃数 -->
        <include refid="pccu_column"/>
        FROM stat_integrated
        WHERE 1 = 1
        <if test="@Ognl@isNotBlank(month)">and log_month = #{month}</if>
        <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>
        group by log_month
        order by log_month desc
    </select>    
    
    <select id="findDayActiveUserReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    SELECT
			stat_integrated.log_day log_day,
			count(1) sum_servernum,
			sum(stat_integrated.dau) sum_dau
		FROM
			stat_integrated
		WHERE
			1 = 1 
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	        <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>
		GROUP BY
			stat_integrated.log_day
		ORDER BY
			stat_integrated.log_day DESC	
    </select>
    
    <select id="findDayServerActiveReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	SELECT
			stat_integrated.log_day log_day,
			stat_integrated.pid pid,
			stat_integrated.area_id area_id,
			stat_integrated.dau dau
		FROM
			stat_integrated
		WHERE
			1 = 1 
			<if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	        <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>
        ORDER BY
			stat_integrated.log_day DESC	
    </select>
    
    <select id="findWeekComparison" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	SELECT
			stat_integrated.log_day log_day,
			sum(stat_integrated.dau) sum_dau
		FROM
			stat_integrated
		WHERE
			1 = 1 
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	        <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>
        GROUP BY
			stat_integrated.log_day
        ORDER BY
			stat_integrated.log_day DESC	
    </select>
    
    <select id="findMonthComparison" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	SELECT
			stat_integrated.log_day log_day,
			sum(stat_integrated.dau) sum_dau
		FROM
			stat_integrated
		WHERE
			1 = 1
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	        <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>
        GROUP BY
			stat_integrated.log_day
        ORDER BY
			stat_integrated.log_day DESC	
    </select>
    
    <select id="findServerNum" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	SELECT
			count(area_id) server_num
		FROM
		(
		 	SELECT
			       area_id
			 from
			stat_integrated
		    WHERE
			1 = 1 
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	        <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>
			
			group  by  area_id
			)   a
    </select>
    
    <select id="findActiveNum" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	SELECT 
	  		t2.mau2-t1.mau1 active_num
	  	FROM (
	  		SELECT
				IFNULL(SUM(s1.mau),0) mau1
			FROM
				stat_integrated s1
			WHERE 
				1=1 AND log_day=replace(#{createDateStart},'-','')) t1,
			(SELECT
				SUM(s2.mau) mau2
			FROM
				stat_integrated s2
			WHERE 
				1=1  
		<if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>
		 AND log_day=replace(#{createDateEnd},'-','')) t2
    </select>
     <!--月营收统计 -->
    <select id="monthRevenus" parameterType="java.util.HashMap" resultType="com.mokylin.cabal.modules.tools.entity.mothRevenue">
        select
            a.log_month as month,
            sum(a.oldUser) as oldUser,
            sum(a.active) as active,
            sum(a.mpu)as chargeNum,
            b.newUser as newUser,
            b.income as income
        from (
            select log_month,
                    MAX(mou) as oldUser,
                    max(mau)as active,
                    max(mpu) as mpu,
                     area_id
            from stat_integrated where log_month=#{months} GROUP BY area_id )a,
        (
             select log_month,
                    SUM(dru)as newUser,
                    SUM(income)as income
             from stat_integrated where log_month=#{months} )b
        where a.log_month = b.log_month
    </select>

    <!-- 日指标 -->
    <select id="dateTarget" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         select A.logday as day,
                A.income as dayIncome,
                A.newUser as newUser,
                B.pid1Income as pid1Income,
                B.pid2Income as pid2Income,
                B.pid3Income as pid3Income,
                B.pid1newUser as pid1newUser,
                B.pid2newUser as pid2newUser,
                B.pid3newUser as pid3newUser
          from  (
                select  DATE_FORMAT(log_day,'%Y-%m-%d') as logday ,
                        sum(income) as income ,
                        sum(dru) as newUser
                 from stat_integrated
                 where log_month= #{months}
                 GROUP BY log_day )A,
        (
              select DATE_FORMAT(log_day,'%Y-%m-%d')as logday,
                     SUM(case pid when #{pid1} then income else 0 end) pid1Income,
                     SUM(case pid when #{pid2} then income else 0 end) pid2Income,
                     SUM(CASE pid when #{pid3} then income else 0 end) pid3Income,
                     SUM(case pid when #{pid1} then dru else 0 end) pid1newUser,
                     SUM(case pid when #{pid2} then dru else 0 end) pid2newUser,
                     SUM(case pid when #{pid3} then dru else 0 end) pid3newUser
              from stat_integrated
              where log_month= #{months}
              GROUP BY log_day )B
           where A.logday = B.logday
           order by day asc
    </select>

	<!--新注册用户7日留存率 -->
   	<select id="findSevenDaysRemainerReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	    SELECT
			    stat_integrated.log_day log_day,
			    SUM(stat_integrated.dru) sum_dru, <!-- dru日新注册人数 -->
			    SUM(stat_integrated.second_remainer) sum_2,
			    SUM(stat_integrated.second_remainer)/SUM(stat_integrated.dru) sum_2_dru, <!-- dru日活跃 -->
			    SUM(stat_integrated.third_remainer) sum_3,
			    SUM(stat_integrated.third_remainer)/SUM(stat_integrated.dru) sum_3_dru,
			    SUM(stat_integrated.foruth_remainer) sum_4,
			    SUM(stat_integrated.foruth_remainer)/SUM(stat_integrated.dru) sum_4_dru,
			    SUM(stat_integrated.fifth_remainer) sum_5,
			    SUM(stat_integrated.fifth_remainer)/SUM(stat_integrated.dru) sum_5_dru,
			    SUM(stat_integrated.sixth_remainer) sum_6,
			    SUM(stat_integrated.sixth_remainer)/SUM(stat_integrated.dru) sum_6_dru,
			    SUM(stat_integrated.seventh_remainer) sum_7,
			    SUM(stat_integrated.seventh_remainer)/SUM(stat_integrated.dru) sum_7_dru
		    FROM
		    	stat_integrated
		    WHERE
		    	1 = 1 
		    	<if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        		<if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
        <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>
		    GROUP BY
		    	stat_integrated.log_day
		    ORDER BY
				stat_integrated.log_day DESC 
    </select>
	<!--新注册分服7日留存率 -->
   	<select id="findSevenDaysRemainerInNewServerReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	    SELECT
			    stat_integrated.log_day log_day,
			    SUM(stat_integrated.dru) sum_dru,
			    SUM(stat_integrated.second_remainer)/SUM(stat_integrated.dru) sum_2_dru,
			    SUM(stat_integrated.third_remainer)/SUM(stat_integrated.dru) sum_3_dru,
			    SUM(stat_integrated.foruth_remainer)/SUM(stat_integrated.dru) sum_4_dru,
			    SUM(stat_integrated.fifth_remainer)/SUM(stat_integrated.dru) sum_5_dru,
			    SUM(stat_integrated.sixth_remainer)/SUM(stat_integrated.dru) sum_6_dru,
			    SUM(stat_integrated.seventh_remainer)/SUM(stat_integrated.dru) sum_7_dru
		    FROM
		    	stat_integrated
		    WHERE
		    	stat_integrated.is_open_day=1 
		    	<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        		<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
		        <if test="@Ognl@isNotBlank(serverIdList)">
					AND area_id IN
					<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
							#{item}
					</foreach>
				</if>
		    GROUP BY
		    	stat_integrated.log_day
		    ORDER BY
				stat_integrated.log_day DESC 
    </select>
	<!--新注册老服务7日留存率 -->
   	<select id="findSevenDaysRemainerInOldServerReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	    SELECT
			    stat_integrated.log_day log_day,
			    SUM(stat_integrated.dru) sum_dru,
			    SUM(stat_integrated.second_remainer)/SUM(stat_integrated.dru) sum_2_dru,
			    SUM(stat_integrated.third_remainer)/SUM(stat_integrated.dru) sum_3_dru,
			    SUM(stat_integrated.foruth_remainer)/SUM(stat_integrated.dru) sum_4_dru,
			    SUM(stat_integrated.fifth_remainer)/SUM(stat_integrated.dru) sum_5_dru,
			    SUM(stat_integrated.sixth_remainer)/SUM(stat_integrated.dru) sum_6_dru,
			    SUM(stat_integrated.seventh_remainer)/SUM(stat_integrated.dru) sum_7_dru
		    FROM
		    	stat_integrated
		    WHERE
		    	stat_integrated.is_open_day=0 
		    	<if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        		<if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>	
		        <if test="@Ognl@isNotBlank(serverIdList)">
					AND area_id IN
					<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
							#{item}
					</foreach>
				</if>
		    GROUP BY
		    	stat_integrated.log_day
		    ORDER BY
				stat_integrated.log_day DESC   
    </select>
	<!--新注册用户月留存率 -->
   	<select id="findMonthRemainerReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  	    SELECT
				stat_integrated.log_day AS log_day,
				SUM(stat_integrated.dru) AS sum_dru,
				SUM(stat_integrated.second_remainer) AS sum_2,
				SUM(stat_integrated.second_remainer)/SUM(stat_integrated.dru) AS sum_2_dru,
				SUM(stat_integrated.seventh_remainer) AS sum_7,
				SUM(stat_integrated.seventh_remainer)/SUM(stat_integrated.dru) AS sum_7_dru,
				SUM(stat_integrated.doubleweek_remainer) AS sum_14,
				SUM(stat_integrated.doubleweek_remainer)/SUM(stat_integrated.dru) AS sum_14_dru,
				SUM(stat_integrated.month_remainer) AS sum_30,
				SUM(stat_integrated.month_remainer)/SUM(stat_integrated.dru) AS sum_30_dru
			FROM
			    stat_integrated
			WHERE
			    1 = 1 
			    <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
        		<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
			    <if test="@Ognl@isNotBlank(serverIdList)">
					AND area_id IN
					<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
							#{item}
					</foreach>
				</if>        	
			GROUP BY
			    stat_integrated.log_day
			ORDER BY
				stat_integrated.log_day DESC   
    </select>
    
    <!-- 在线数据分布 -->
    <select id="onlineDataList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
         select DATE_FORMAT(log_day,'%Y-%m-%d') as log_day,
                sum(pcu) as hight,
                sum(acu) as avg
         from stat_integrated
         where 1=1
         <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
         <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
	    <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>
        GROUP BY log_day
        ORDER BY log_day desc
    </select>

    <!-- 元宝产出消耗统计 -->
    <select id="findCoinProduceConsumeReport" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            stat_integrated.log_day log_day,
            SUM(stat_integrated.pay_coin) sum_pay_coin,
            SUM(stat_integrated.consume_coin) sum_consume_coin,
             sum(all_surplus_coin)/SUM(stat_integrated.pay_coin) redundance_rate,
            SUM(stat_integrated.all_surplus_coin) all_surplus_coin
        FROM
            stat_integrated
        WHERE
            1 = 1 
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
		    <if test="@Ognl@isNotBlank(serverIdList)">
				AND area_id IN
				<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
						#{item}
				</foreach>
			</if>            
        GROUP BY
            stat_integrated.log_day
        ORDER BY
            stat_integrated.log_day DESC
    </select>
    <!-- 元宝产出消耗统计 -->
    <select id="findPlatformRecharge" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      	SELECT
			stat_integrated.log_day log_day,
			stat_integrated.pid pid,
			stat_integrated.dau dau,
			stat_integrated.income income,
			stat_integrated.dpa dpa,
			IFNULL(stat_integrated.dpa/dau,0) dpa_dau,
            IFNULL(stat_integrated.income/dpa,0) income_dpa,
            IFNULL(stat_integrated.income/dau,0) income_dau,
			stat_integrated.nn_pa nn_pa,
			stat_integrated.nn_pay_value nn_pay_value,
            IFNULL(stat_integrated.nn_pa/dau,0) nn_pa_dau,
            IFNULL(stat_integrated.nn_pay_value/nn_pa,0) nn_pay_value_nn_pa,
            stat_integrated.on_pa on_pa,
            stat_integrated.on_pay_value on_pay_value,
            IFNULL(stat_integrated.on_pa/dau,0) on_pa_dau,
            IFNULL(stat_integrated.on_pay_value/on_pa,0) on_pay_value_on_pa,
            stat_integrated.oo_pa oo_pa,
            stat_integrated.oo_pay_value oo_pay_value,
            IFNULL(stat_integrated.oo_pa/dau,0) oo_pa_dau,
            IFNULL(stat_integrated.oo_pay_value/oo_pa,0) oo_pay_value_oo_pa
		FROM
			stat_integrated
		WHERE
			1 = 1 
			 <if test="@Ognl@isNotBlank(pidsList)">
				AND pid IN
			     <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
			       #{item}
			     </foreach>
		    </if>
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
		ORDER BY
			log_day DESC
    </select>
    <!-- 多服开服回本数据 -->
    <select id="findOpenManyServiceIncome" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      	SELECT
			stat_integrated.pid pid,
			SUM(stat_integrated.pv) sum_pv,
            (
              select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 1
              <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
              </if>
              <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
              <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_1,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 3
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_3,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 5
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_5,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 7
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_7,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 10
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_10,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 14
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_14,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 30
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_30,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 60
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_60,
            (
            select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 90
            <if test="@Ognl@isNotBlank(pidsList)">
                AND stat_integrated.pid IN
                <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_90
		FROM
			stat_integrated
		WHERE 
			1=1 
			<if test="@Ognl@isNotBlank(pidsList)">
				AND stat_integrated.pid IN
		        <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
		            #{item}
		        </foreach>
	        </if>
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
		GROUP BY
			stat_integrated.pid
		ORDER BY
			stat_integrated.pid
    </select>
    <!-- 单服开服回本数据 -->
    <select id="findOpenSingleServiceIncome" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      	SELECT
			stat_integrated.log_day log_day,
			stat_integrated.pid pid,
			SUM(stat_integrated.pv) sum_pv,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 1
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_1,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 3
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_3,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 5
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_5,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 7
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_7,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 10
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_10,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 14
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_14,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 30
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_30,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 60
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_60,
            (
                select sum(income) from stat_integrated where open_days <![CDATA[ <= ]]> 90
                AND pid=#{pid}
                <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
                <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
            ) income_90
		FROM
		stat_integrated
		WHERE 
			1=1
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
            <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
        AND pid=#{pid}
		GROUP BY
			stat_integrated.pid
		ORDER BY
			stat_integrated.log_day
    </select>
    
    <select id="findOnlineTotal" resultType="java.util.HashMap" parameterType="java.util.HashMap">
          SELECT
          	pid,
            log_day,
            count(id) server_total,
            round(avg(stat_integrated.acu),2)  acu,
              <include refid="pccu_column"/>
       FROM stat_integrated
          WHERE 1 = 1
          <if test="@Ognl@isNotBlank(pidsList)">
				AND pid IN
			     <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
			       #{item}
			     </foreach>
		  </if>
          <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
          GROUP BY log_day, pid
          ORDER BY log_day DESC
    </select>
    
    <select id="findOnlineTotalPieGraph" resultType="java.util.HashMap" parameterType="java.util.HashMap">
          SELECT
          	pid,
            sum(acu) acu
       FROM stat_integrated
          WHERE 1 = 1
          <if test="@Ognl@isNotBlank(pidsList)">
				AND pid IN
			     <foreach item="item" index="index" collection="pidsList" open="(" separator="," close=")">
			       #{item}
			     </foreach>
		  </if>
          <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
          GROUP BY pid
    </select>
    
    <select id="findACCUDistributionByPid" resultType="java.util.HashMap" parameterType="java.util.HashMap">
          SELECT
          	count(id) server_count
       FROM stat_integrated
          WHERE 1 = 1
          and pid = #{pid}
          and log_day = #{log_day}
          <if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          <if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
          <if test="@Ognl@isNotBlank(ACCUStart)">and acu <![CDATA[ >= ]]>#{ACCUStart}</if>
          <if test="@Ognl@isNotBlank(ACCUEnd)">and acu <![CDATA[ < ]]>#{ACCUEnd}</if>
    </select>


    <select id="findByDay" resultType="java.util.HashMap" parameterType="java.util.HashMap">
         SELECT dru,dau,pcu FROM stat_integrated
         WHERE area_id = #{serverId}
         AND pid = #{game}
         AND log_day = #{date}
    </select>
    
     <select id="export" parameterType="java.util.HashMap" resultType="java.util.LinkedHashMap">
        SELECT
        stat_integrated.pid pid,
		stat_integrated.area_id area_id,
		stat_integrated.log_day log_day,
		sum(stat_integrated.income) income,
		sum(stat_integrated.dru) dru,
		sum(stat_integrated.dau) dau,
		sum(stat_integrated.dau - stat_integrated.dru) dau_sub_dru,
		round(avg(stat_integrated.acu),2) acu,
		stat_integrated.pcu pcu,
		round((avg(stat_integrated.dt)/60000),2) dt,
		sum(stat_integrated.dpa) dpa,
		sum(stat_integrated.dp_times) dp_times,
	  	round(IFNULL(sum(stat_integrated.dpa/stat_integrated.dau)*100,0),2) dpa_dau,
	  	round(IFNULL(sum(stat_integrated.income/stat_integrated.dpa),0),2) income_pa,
	  	round(IFNULL(sum(stat_integrated.income/stat_integrated.dau),0),2) income_dau_duplicate,
		sum(stat_integrated.first_pay_user) first_pay_user,
		sum(stat_integrated.first_pay_times) first_pay_times,
		sum(stat_integrated.first_pay_value) first_pay_value,
		sum(stat_integrated.second_remainer) second_remainer,
		sum(stat_integrated.third_remainer) third_remainer,
		sum(stat_integrated.seventh_remainer) seventh_remainer,
		sum(stat_integrated.doubleweek_remainer) doubleweek_remainer,
		sum(stat_integrated.month_remainer) month_remainer
		FROM
			stat_integrated
		WHERE 1 = 1
			
			<if test="@Ognl@isNotBlank(createDateEnd)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
          	<if test="@Ognl@isNotBlank(createDateStart)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
			<if test="@Ognl@isNotBlank(filter)">${filter} </if>
        GROUP BY
			stat_integrated.log_day,stat_integrated.area_id
		ORDER BY
			stat_integrated.area_id,stat_integrated.log_day

    </select>
    <select id="selectPccu"  resultType="java.util.HashMap" parameterType="java.util.HashMap">
      SELECT log_day  logDay, five_minute_count as  col   from stat_integrated WHERE 1 = 1 
          <if test="@Ognl@isNotBlank(endDate)">and log_day <![CDATA[ <= ]]>#{endDate}</if>
         <if test="@Ognl@isNotBlank(startDate)">and log_day <![CDATA[ >= ]]>#{startDate}</if>
        <if test="@Ognl@isNotBlank(serverIdList)">
			AND area_id IN
			<foreach item="item" index="index" collection="serverIdList" open="(" separator="," close=")">
					#{item}
			</foreach>
		</if>          
    </select>
    
     <select id="selectPccuMonth" resultType="java.util.HashMap" parameterType="java.lang.String">
      SELECT log_day  logDay, five_minute_count as  col   from stat_integrated 
     WHERE log_month = #{month}
     
    </select>
    
</mapper>